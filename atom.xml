<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FlagMeng&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="xueshimeng.github.io.git/"/>
  <updated>2020-02-11T07:10:22.919Z</updated>
  <id>xueshimeng.github.io.git/</id>
  
  <author>
    <name>FlagMeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot相关问题的理解</title>
    <link href="xueshimeng.github.io.git/2020/02/11/SpringBoot%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3/"/>
    <id>xueshimeng.github.io.git/2020/02/11/SpringBoot%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3/</id>
    <published>2020-02-11T13:01:24.000Z</published>
    <updated>2020-02-11T07:10:22.919Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>基于你对springboot的理解描述一下什么是springboot？</p><p> 答：如今多数项目中会用到Spring框架， 而Spring框架的核心在于IoC（控制反转）和DI（依赖注入）。为了实现IOC和DI， 就需要在使用框架的过程中配置大量的xml， 或者说需要做很多繁琐的配置。springboot能够帮助我们使用spring框架的开发者快速高效的构建一个基于spring框架以及spring生态体系的应用解决方案，它是对“约定优于配置”这个理念下的一个最佳实践。 因此可以理解为它是一个服务于框架的框架。</p></li><li><p>springboot约定优于配置指的是什么？</p><p> 答: 约定优于配置（Convention Over Configuration）, 目的在于减少程序开发人员所需要的做出决定的数量，开发人员仅仅需要规定应用中不符合约定的部分，如果模型中有个名为Sale的类，数据库中对应的表就会默认命名为sale。只有在偏离这一约定的时候,比如将该表命名为”products_sold”，才会需要写有关这个名字的配置，在springboot的具体体现：</p><ol><li>maven的目录结构：<br> a)默认由resources文件夹存放配置文件；<br> b)默认打包方式为jar；</li><li>spring-boot-starter-web中包含spring mvc相关依赖， 以及内置tomcat容器， 使得构建一个web应用更加简单；</li><li>提供application.properties/yml文件；</li><li>通过spring.profiles.active属性来决定运行环境时读取的配置文件；</li><li>EnableAutoConfiguration默认对于依赖的starter进行自动装载；</li></ol></li><li><p>@SpringbootApplication由那几个注解组成， 分别表示什么作用？</p><p> 答：@SpringbootApplication是一个复合注解， 主要由三个注解组成， 分别是</p><ol><li>@Configuration， 它是JavaConfig形式的基于SpringIOC容器配置类使用的一种注解。spring支持两种bean的配置方式， 一种是基于xml文件方式， 一种是JavaConfig。任何标注了@Configuration注解的java类都会被定义为一个javaConfig配置类， 它的返回值会作为bean定义注册到Spring的IOC的容器；</li><li>@EnableAutoConfiguration，它的作用是帮助springboot应用把所有符合条件的@Configuration配置都加载到当前Springboot创建并使用的IOC容器中。</li><li>@ComponentScan，它相当于xml配置文件中的<code>&lt;context:component-scan&gt;</code>作用是扫描指定路径下的标识了需要装配的类， 自动装配到spring的IOC容器中。标识需要装配的类的形式主要是：@Component、@Repository、@Service、@Controller注解标识的java类。</li></ol></li><li><p>springboot自动装配的实现原理是什么？</p><p> 答：<strong>首先什么是springboot的自动装配</strong>，springboot有一个依赖包spring-boot-autoconfigure做了很多默认的配置项,即应用默认值。同时， springboot有一个全局的配置文件application.properties/yml可以配置依赖应用相关的属性，springboot根据依赖包以及全局配置文件的配置，自动的加载应用以及相关的配置属性并启动这些应用就是springboot的自动装配；</p><p> <strong>其次为什么需要自动装配</strong>，自动配置的意义是利用这种模式代替配置XML的繁琐模式，比如以前使用SpringMVC，需要进行配置组件扫描、调度器、视图解析器等，使用springboot自动配置后，只需要添加mvc组件就可以自动配置所需要的bean。</p><p> <strong>最后自动配置的原理</strong>，springboot的启动类上有一个@SpringBootApplication注解， 这是一个复合注解或者说是派生注解， 在@SpringBootApplication中有一个注解@EnableAutoConfiguration，翻译成汉语就是开启自动配置，而这个注解也是一个派生注解，它关键的功能由@Import提供，通过@Import导入的AutoConfigurationImportSelector的selectImport()方法通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有MATA-INF/spring.factories的jar包，并解析所有的spring.factories文件。spring.factories文件是一组一组的key=value的形式，key是EnableAutoConfiguration类的全类名，value是一个XxxAutoConfiguration的类名的列表， 这些类名以逗号分开，实际上就是一个个JavaConfig形式的spring容器配置类。selectImports()方法找到所有的JavaConfig自动配置类后，将其加载到spring容器中。对于属性的配置， 每一个XxxAutoConfiguration配置类都会有一个@EnableConfigurationProperties注解，翻译成汉语就是开启配置属性，而这个注解所引出的就是XxxProperties属性配置实体类，在XxxProperties实体类上有一个@ConfigurationProperties注解，它的作用是从配置文件中绑定属性到对应的bean上，也就是说将配置文件中的属性绑定到对应的XxxProperties实体类上并封装成一个bean，最后由@EnableConfigurationProperties注解导入到Spring容器中， 作为spring容器中javaconfig配置类所需要的属性。<br> <strong>原理说简单点就是</strong>，Springboot启动时， 通过@EnableAutoConfiguration注解找到META-INF/spring.factories配置文件中的所有自动配置类并对其进行加载，而这些自动配置类都是以AutoConfiguration结尾来命名的，它实际上就是一个JavaConfig形式的Spring容器配置类。对于配置类所需要的在全局配置文件中配置的属性，就要从以Properties结尾命名的类中获取，而这个以Properties结尾命名的类的属性值是通过@ConfigurationProperties注解与全局配置文件中对应的属性进行绑定的。【<a href="https://blog.csdn.net/u014745069/article/details/83820511" target="_blank" rel="noopener">参考文档</a>】</p></li><li><p>spring中的spi机制的原理是什么？</p><p> 答：<strong>SPI的理解：</strong>SPI(Service Provider Interface)， 系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案、比如JDBC模块的实现方案， 在面向对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码（也就是说代码里不涉及具体的实现类）， 一旦代码里涉及具体的实现类，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里指明具体的实现，这就需要一种服务发现机制， spi就提供了这样的一种机制。简单说，spi是为某个接口寻找服务实现的机制，这个是针对厂商或者插件的（比如Java提供的SPI的接口是Java核心库的一部分，Spring提供的SPI接口是Spring的一部分， 而具体的实现是由第三方实现）。</p><p> <strong>SPI约定：</strong>当服务的提供者，提供了服务接口的一种实现之后，在jar包的META-INF/的某个目录里同时创建一个以服务接口命名的文件。该文件里就是实现该服务接口的具体实现类。而当外部程序装配这个模块的时候，就能通过该jar包META-INF/下对应目录里的配置文件找到具体的实现类名，并装载实例化，完成模块的注入。通过这个约定，就不需要把服务放在代码中了，通过模块被装配的时候就可以发现服务类了。</p><p> <strong>Springboot中SPI扩展机制：</strong>springboot提供的spi接口为ImportSelector，包含抽象方法 <code>public String[] selectImports(AnnotationMetadata annotationMetadata)</code>,并提供了自动装载的实现AutoConfigurationImportSelector等，开发者也可以编写自己的组件，并在META-INF/中相应文件夹中给出配置。在springboot的自动装配过程中，按照SPI约定的那样，在selectImport()方法中通过SpringFactoriesLoader加载CLASSPATH下的每个jar包中的META-INF/spring.factories配置文件并解析，找到指定名称的配置后返回，并将这些名称对应的配置类加载到spring容器中。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;基于你对springboot的理解描述一下什么是springboot？&lt;/p&gt;
&lt;p&gt; 答：如今多数项目中会用到Spring框架， 而Spring框架的核心在于IoC（控制反转）和DI（依赖注入）。为了实现IOC和DI， 就需要在使用框架的过程中配置大量的
      
    
    </summary>
    
    
      <category term="分布式服务治理" scheme="xueshimeng.github.io.git/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/"/>
    
    
      <category term="Springboot" scheme="xueshimeng.github.io.git/tags/Springboot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="xueshimeng.github.io.git/2019/11/27/hello-world/"/>
    <id>xueshimeng.github.io.git/2019/11/27/hello-world/</id>
    <published>2019-11-27T07:58:18.892Z</published>
    <updated>2019-11-28T07:30:49.230Z</updated>
    
    <content type="html"><![CDATA[<p>终于搭建了自己的博客， 话不多说， 世界你好！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于搭建了自己的博客， 话不多说， 世界你好！！！&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
